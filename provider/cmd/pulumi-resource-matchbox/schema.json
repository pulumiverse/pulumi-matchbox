{
    "name": "matchbox",
    "displayName": "Matchbox",
    "description": "A Pulumi package for creating and managing the Matchbox iPXE server.",
    "keywords": [
        "pulumi",
        "matchbox",
        "category/network"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`matchbox` Terraform Provider](https://github.com/poseidon/terraform-provider-matchbox).",
    "repository": "https://github.com/pulumiverse/pulumi-matchbox",
    "pluginDownloadURL": "github://api.github.com/pulumiverse",
    "publisher": "Pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "importBasePath": "github.com/pulumiverse/pulumi-matchbox/sdk/go/matchbox",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@pulumiverse/matchbox",
            "packageDescription": "A Pulumi package for creating and managing the Matchbox iPXE server.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/poseidon/terraform-provider-matchbox)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-matchbox` repo](https://github.com/pulumiverse/pulumi-matchbox/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-matchbox` repo](https://github.com/poseidon/terraform-provider-matchbox/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumiverse_matchbox",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/poseidon/terraform-provider-matchbox)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-matchbox` repo](https://github.com/pulumiverse/pulumi-matchbox/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-matchbox` repo](https://github.com/poseidon/terraform-provider-matchbox/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "ca": {
                "type": "string"
            },
            "clientCert": {
                "type": "string"
            },
            "clientKey": {
                "type": "string",
                "secret": true
            },
            "endpoint": {
                "type": "string"
            }
        },
        "defaults": [
            "ca",
            "clientCert",
            "clientKey",
            "endpoint"
        ]
    },
    "provider": {
        "description": "The provider type for the matchbox package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "ca": {
                "type": "string"
            },
            "clientCert": {
                "type": "string"
            },
            "clientKey": {
                "type": "string",
                "secret": true
            },
            "endpoint": {
                "type": "string"
            }
        },
        "required": [
            "ca",
            "clientCert",
            "clientKey",
            "endpoint"
        ],
        "inputProperties": {
            "ca": {
                "type": "string"
            },
            "clientCert": {
                "type": "string"
            },
            "clientKey": {
                "type": "string",
                "secret": true
            },
            "endpoint": {
                "type": "string"
            }
        },
        "requiredInputs": [
            "ca",
            "clientCert",
            "clientKey",
            "endpoint"
        ]
    },
    "resources": {
        "matchbox:index/group:Group": {
            "description": "## # Group Resource\n\nA Group matches (one or more) machines and declares a machine should be boot with a named `profile`.\n\n```tf\nresource \"matchbox_group\" \"node1\" {\n  name = \"node1\"\n  profile = \"${matchbox_profile.myprofile.name}\"\n  selector = {\n    mac = \"52:54:00:a1:9c:ae\"\n  }\n  metadata = {\n    custom_variable = \"machine_specific_value_here\"\n  }\n}\n```\n",
            "properties": {
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map of group metadata (optional, seldom used)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unqiue name for the machine matcher\n"
                },
                "profile": {
                    "type": "string",
                    "description": "Name of a Matchbox profile\n"
                },
                "selector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map of hardware machine selectors. See [reserved selectors](https://matchbox.psdn.io/matchbox/#reserved-selectors). An empty selector becomes a global default group that matches machines.\n"
                }
            },
            "required": [
                "name",
                "profile"
            ],
            "inputProperties": {
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map of group metadata (optional, seldom used)\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Unqiue name for the machine matcher\n",
                    "willReplaceOnChanges": true
                },
                "profile": {
                    "type": "string",
                    "description": "Name of a Matchbox profile\n",
                    "willReplaceOnChanges": true
                },
                "selector": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map of hardware machine selectors. See [reserved selectors](https://matchbox.psdn.io/matchbox/#reserved-selectors). An empty selector becomes a global default group that matches machines.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "profile"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Map of group metadata (optional, seldom used)\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Unqiue name for the machine matcher\n",
                        "willReplaceOnChanges": true
                    },
                    "profile": {
                        "type": "string",
                        "description": "Name of a Matchbox profile\n",
                        "willReplaceOnChanges": true
                    },
                    "selector": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Map of hardware machine selectors. See [reserved selectors](https://matchbox.psdn.io/matchbox/#reserved-selectors). An empty selector becomes a global default group that matches machines.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "matchbox:index/profile:Profile": {
            "description": "## # Profile Resource\n\nA Profile defines network boot and declarative provisioning configurations.\n\n```tf\nvariable \"os_stream\" {\n  type        = string\n  description = \"Fedora CoreOS release stream (e.g. testing, stable)\"\n  default     = \"stable\"\n}\n\nvariable \"os_version\" {\n  type        = string\n  description = \"Fedora CoreOS version to PXE and install (e.g. 32.20200715.3.0)\"\n}\n\nlocals {\n  kernel = \"https://builds.coreos.fedoraproject.org/prod/streams/${var.os_stream}/builds/${var.os_version}/x86_64/fedora-coreos-${var.os_version}-live-kernel-x86_64\"\n  initrd = \"https://builds.coreos.fedoraproject.org/prod/streams/${var.os_stream}/builds/${var.os_version}/x86_64/fedora-coreos-${var.os_version}-live-initramfs.x86_64.img\"\n}\n```\n\n```tf\nresource \"matchbox_profile\" \"worker\" {\n  name = \"worker\"\n  kernel = local.kernel\n  initrd = [\n    local.initrd\n  ]\n  args = [\n    \"ip=dhcp\",\n    \"rd.neednet=1\",\n    \"initrd=fedora-coreos-${var.os_version}-live-initramfs.x86_64.img\",\n    \"coreos.inst.image_url=https://builds.coreos.fedoraproject.org/prod/streams/${var.os_stream}/builds/${var.os_version}/x86_64/fedora-coreos-${var.os_version}-metal.x86_64.raw.xz\",\n    \"coreos.inst.ignition_url=${var.matchbox_http_endpoint}/ignition?uuid=$${uuid}\u0026mac=$${mac:hexhyp}\",\n    \"coreos.inst.install_dev=sda\",\n    \"console=tty0\",\n    \"console=ttyS0\",\n  ]\n\n  raw_ignition = data.ct_config.worker.rendered\n}\n\n// Transpile Fedora CoreOS config to Ignition\ndata \"ct_config\" \"worker\" {\n  content      = file(\"worker.yaml\")\n  strict       = true\n}\n```\n",
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of kernel arguments\n"
                },
                "containerLinuxConfig": {
                    "type": "string",
                    "description": "CoreOS Container Linux Config (CLC) (for backwards compatibility)\n"
                },
                "genericConfig": {
                    "type": "string"
                },
                "initrds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URLs to init RAM filesystems\n"
                },
                "kernel": {
                    "type": "string",
                    "description": "URL of the kernel image to boot\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unqiue name for the machine matcher\n"
                },
                "rawIgnition": {
                    "type": "string"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of kernel arguments\n",
                    "willReplaceOnChanges": true
                },
                "containerLinuxConfig": {
                    "type": "string",
                    "description": "CoreOS Container Linux Config (CLC) (for backwards compatibility)\n",
                    "willReplaceOnChanges": true
                },
                "genericConfig": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "initrds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URLs to init RAM filesystems\n",
                    "willReplaceOnChanges": true
                },
                "kernel": {
                    "type": "string",
                    "description": "URL of the kernel image to boot\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Unqiue name for the machine matcher\n",
                    "willReplaceOnChanges": true
                },
                "rawIgnition": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Profile resources.\n",
                "properties": {
                    "args": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of kernel arguments\n",
                        "willReplaceOnChanges": true
                    },
                    "containerLinuxConfig": {
                        "type": "string",
                        "description": "CoreOS Container Linux Config (CLC) (for backwards compatibility)\n",
                        "willReplaceOnChanges": true
                    },
                    "genericConfig": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "initrds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of URLs to init RAM filesystems\n",
                        "willReplaceOnChanges": true
                    },
                    "kernel": {
                        "type": "string",
                        "description": "URL of the kernel image to boot\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Unqiue name for the machine matcher\n",
                        "willReplaceOnChanges": true
                    },
                    "rawIgnition": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    }
}